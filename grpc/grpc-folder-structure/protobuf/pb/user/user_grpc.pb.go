//message

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SampleUserService_GetUserDataForClient_FullMethodName = "/user.SampleUserService/GetUserDataForClient"
)

// SampleUserServiceClient is the client API for SampleUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleUserServiceClient interface {
	// client1
	GetUserDataForClient(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
}

type sampleUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleUserServiceClient(cc grpc.ClientConnInterface) SampleUserServiceClient {
	return &sampleUserServiceClient{cc}
}

func (c *sampleUserServiceClient) GetUserDataForClient(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, SampleUserService_GetUserDataForClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleUserServiceServer is the server API for SampleUserService service.
// All implementations must embed UnimplementedSampleUserServiceServer
// for forward compatibility
type SampleUserServiceServer interface {
	// client1
	GetUserDataForClient(context.Context, *UserDataRequest) (*UserDataResponse, error)
	mustEmbedUnimplementedSampleUserServiceServer()
}

// UnimplementedSampleUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSampleUserServiceServer struct {
}

func (UnimplementedSampleUserServiceServer) GetUserDataForClient(context.Context, *UserDataRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataForClient not implemented")
}
func (UnimplementedSampleUserServiceServer) mustEmbedUnimplementedSampleUserServiceServer() {}

// UnsafeSampleUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleUserServiceServer will
// result in compilation errors.
type UnsafeSampleUserServiceServer interface {
	mustEmbedUnimplementedSampleUserServiceServer()
}

func RegisterSampleUserServiceServer(s grpc.ServiceRegistrar, srv SampleUserServiceServer) {
	s.RegisterService(&SampleUserService_ServiceDesc, srv)
}

func _SampleUserService_GetUserDataForClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleUserServiceServer).GetUserDataForClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleUserService_GetUserDataForClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleUserServiceServer).GetUserDataForClient(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleUserService_ServiceDesc is the grpc.ServiceDesc for SampleUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.SampleUserService",
	HandlerType: (*SampleUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDataForClient",
			Handler:    _SampleUserService_GetUserDataForClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
